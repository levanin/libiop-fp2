
#include "libiop/algebra/large_field.hpp"
namespace libiop {
    namespace sidh_field {
        void init_params() {
            assert(Fp::modulus_is_valid());
            Fp::Rsquared = libff::bigint<limbs>("11670842892826704282446807045015068798005654319470624232167485311695550996073777036812919341238917739503302545896714443026026871");
            Fp::Rcubed = libff::bigint<limbs>("22698988592753557634872139742080783794550501862711300293198750092029709806281700938341229976599779072917632061262364142479875440");
            Fp::inv = 0xffffffffffffffff;

            Fp::num_bits = 425;
            Fp::euler = libff::bigint<limbs>("35799937003923664382679411637877187918582685903947651139637413090144367049802700282182934577873952801609451699257155672864718848");
            Fp::s = 206;
            Fp::t = libff::bigint<limbs>("696198609130885597695136021593547814689632716312296141651066450089");
            Fp::t_minus_1_over_2 = libff::bigint<limbs>("348099304565442798847568010796773907344816358156148070825533225044");
            Fp::multiplicative_generator = Fp("5");
            Fp::root_of_unity = Fp("45088048282459687398485922424312487749745200896454603205929219968713742705532171884364168308847501716494182411630221149581149930");
            Fp::nqr = Fp("5");
            Fp::nqr_to_t = Fp("45088048282459687398485922424312487749745200896454603205929219968713742705532171884364168308847501716494182411630221149581149930");
        }
    } // namespace sidh_field
}
